/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.CriminalJusticeSystem;

import Model.CriminalJusticeSystem.Case;
import Model.CriminalJusticeSystem.Court;
import Model.CriminalJusticeSystem.CriminalJusticeSystem;
import Model.Employee.Employee;
import Model.PrisonEcosystem;
import Model.UserAccountManagement.UserAccount;
import java.awt.CardLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import javax.swing.JPanel;
import Model.CriminalJusticeSystem.Police;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Thejas
 */
public class PoliceAdminLogin extends javax.swing.JPanel {

    CardLayout cardLayoutPointer;
    JPanel container;
    PrisonEcosystem system;
    UserAccount account;
    Employee selectedStaff;
    Police policeDepartment;
    ArrayList<Employee> employeeList;
    CriminalJusticeSystem criminalJusticeSystem;
    Case selectedCase;

    /**
     * Creates new form PoliceAdminLogin
     *
     * @param container
     * @param account
     * @param system
     */
    public PoliceAdminLogin(JPanel container, UserAccount account, PrisonEcosystem system) {
        initComponents();
        this.setSize(800, 600);
        this.container = container;
        cardLayoutPointer = (CardLayout) container.getLayout();
        this.system = system;
        this.account = account;
        initializeStaffTable();
        initializeCaseTable();
        tblPoliceOfficers.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
            }

            @Override
            public void mousePressed(MouseEvent e) {
                initializeFields();
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }

            private void initializeFields() {
                selectedStaff = (Employee) tblCasesAssigned.getModel().getValueAt(tblCasesAssigned.getSelectedRow(), 0);
                txtOfficerName.setText(selectedStaff.getName());
                txtOfficerUsername.setText(selectedStaff.getUserAccount().getUsername());
                txtOfficerPassword.setText(selectedStaff.getUserAccount().getPassword());
            }
        });
        tblCasesAssigned.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
            }

            @Override
            public void mousePressed(MouseEvent e) {
                initializeFields();
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }

            private void initializeFields() {
                selectedCase = (Case) tblCasesAssigned.getModel().getValueAt(tblCasesAssigned.getSelectedRow(), 0);
                btnAssignCase.setEnabled(true);
                drpdwnPoliceOfficers.setEnabled(true);
            }
        });
        drpdwnPoliceOfficers.setEnabled(false);
        btnAssignCase.setEnabled(false);
        drpdwnPoliceOfficers.removeAllItems();
        drpdwnPoliceOfficers.addItem("");
        for (Employee employee : policeDepartment.getListOfPoliceOfficers()) {
            drpdwnPoliceOfficers.addItem(employee.getUserAccount().getUsername());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblOfficerName = new javax.swing.JLabel();
        txtOfficerName = new javax.swing.JTextField();
        lblOfficerUsername = new javax.swing.JLabel();
        txtOfficerUsername = new javax.swing.JTextField();
        lblOfficerPassword = new javax.swing.JLabel();
        txtOfficerPassword = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPoliceOfficers = new javax.swing.JTable();
        drpdwnPoliceOfficers = new javax.swing.JComboBox<>();
        btnAssignCase = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCasesAssigned = new javax.swing.JTable();

        lblOfficerName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblOfficerName.setText("Name");

        lblOfficerUsername.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblOfficerUsername.setText("Officer Username");

        lblOfficerPassword.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblOfficerPassword.setText("Officer Password");

        btnAdd.setBackground(new java.awt.Color(244, 208, 129));
        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.setPreferredSize(new java.awt.Dimension(85, 30));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(244, 208, 129));
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.setPreferredSize(new java.awt.Dimension(85, 30));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(244, 208, 129));
        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBack.setText("Back");
        btnBack.setPreferredSize(new java.awt.Dimension(85, 30));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(244, 208, 129));
        btnDelete.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setPreferredSize(new java.awt.Dimension(85, 30));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        tblPoliceOfficers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Officer Name", "Username", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPoliceOfficers);

        btnAssignCase.setText("Assign Case");
        btnAssignCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignCaseActionPerformed(evt);
            }
        });

        tblCasesAssigned.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Case Number", "Name", "Start date", "Years of Imprisonment", "Imprisoned", "Transported By", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCasesAssigned);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(143, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblOfficerName, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtOfficerName, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOfficerPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblOfficerUsername, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtOfficerUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtOfficerPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(103, 103, 103))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(drpdwnPoliceOfficers, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAssignCase))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(245, 245, 245)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOfficerUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOfficerUsername)
                    .addComponent(lblOfficerName)
                    .addComponent(txtOfficerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOfficerPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOfficerPassword))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drpdwnPoliceOfficers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAssignCase))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(427, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        if (checkInputFields(txtOfficerName) && checkInputFields(txtOfficerUsername) && checkInputFields(txtOfficerPassword)) {
//            if (checkIfCatererNameIsUnique()) {

            Employee newOfficer = new Employee(system, txtOfficerName.getText(), txtOfficerUsername.getText(), txtOfficerPassword.getText(), criminalJusticeSystem, new Model.Role.Police());
            policeDepartment.getListOfPoliceOfficers().add(newOfficer);
            initializeStaffTable();
            resetFields();
            JOptionPane.showMessageDialog(this, "New Police officer has been added");
//            } else {
//                JOptionPane.showMessageDialog(this, "Caterer name already exists, try a different name");
//            }
        } else {
            JOptionPane.showMessageDialog(this, "Fields cannot be empty for adding a new Police officer");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    public boolean checkInputFields(javax.swing.JTextField txtField, String regex) {
        return txtField.getText() != null && !txtField.getText().isEmpty() && txtField.getText().matches(regex);
    }

    public boolean checkInputFields(javax.swing.JTextField txtField) {
        return txtField.getText() != null && !txtField.getText().isEmpty();
    }

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if (checkInputFields(txtOfficerName) && checkInputFields(txtOfficerUsername) && checkInputFields(txtOfficerPassword)) {
            if (selectedStaff != null) {
                for (Employee employee : employeeList) {
                    if (selectedStaff.getName().equals(employee.getName())) {
                        employee.setName(txtOfficerName.getText());
                        employee.getUserAccount().setPassword(txtOfficerPassword.getText());
                        employee.getUserAccount().setUsername(txtOfficerUsername.getText());
                        JOptionPane.showMessageDialog(this, "Officer details updated successfully");
                        initializeStaffTable();
                        resetFields();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select a officer to update from the table");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Fields cannot be empty for updating the officer's details");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (selectedStaff != null) {
            policeDepartment.getListOfPoliceOfficers().remove(selectedStaff);
            system.getUserAccountDirectory().deleteUserAccount(selectedStaff.getUserAccount());
            JOptionPane.showMessageDialog(this, "Officer details deleted successfully");
            initializeStaffTable();
            resetFields();

        } else {
            JOptionPane.showMessageDialog(this, "Please select a officer to delete from the table");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAssignCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignCaseActionPerformed
        // TODO add your handling code here:
        if (drpdwnPoliceOfficers.getSelectedIndex() > 0) {
            if (selectedCase.getTransportedToPrisonBy() != null) {
                for (Employee employee : policeDepartment.getListOfPoliceOfficers()) {
                    if (employee.getUserAccount().getUsername().equals(drpdwnPoliceOfficers.getSelectedItem())) {
                        selectedCase.setTransportedToPrisonBy(employee);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnAssignCaseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAssignCase;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> drpdwnPoliceOfficers;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblOfficerName;
    private javax.swing.JLabel lblOfficerPassword;
    private javax.swing.JLabel lblOfficerUsername;
    private javax.swing.JTable tblCasesAssigned;
    private javax.swing.JTable tblPoliceOfficers;
    private javax.swing.JTextField txtOfficerName;
    private javax.swing.JTextField txtOfficerPassword;
    private javax.swing.JTextField txtOfficerUsername;
    // End of variables declaration//GEN-END:variables

    private void initializeStaffTable() {
        criminalJusticeSystem = (CriminalJusticeSystem) account.getEnterprise();
        for (Police police : criminalJusticeSystem.getListOfPolice()) {
            if (police.getPoliceAdmin().getUserAccount().getUsername().equals(account.getUsername())) {
                policeDepartment = police;
                employeeList = new ArrayList<>();
                employeeList = police.getListOfPoliceOfficers();
                DefaultTableModel tablemodel = (DefaultTableModel) tblCasesAssigned.getModel();
                tablemodel.setRowCount(0);
                for (Employee employee : employeeList) {
                    if (employee != null) {
                        Object[] row = new Object[3];
                        row[0] = employee;
                        row[1] = employee.getUserAccount().getUsername();
                        row[2] = employee.getUserAccount().getPassword();
                        tablemodel.addRow(row);
                    }
                }

            }
        }
    }

    private void resetFields() {
        txtOfficerName.setText("");
        txtOfficerUsername.setText("");
        txtOfficerPassword.setText("");
    }

    private void initializeCaseTable() {
        ArrayList<Court> courtList = criminalJusticeSystem.getListOfCourts();
        for (Court court : courtList) {
            ArrayList<Case> cases = court.getCaseDirectory().getListOfCases();
            for (Case aCase : cases) {
                if (aCase.getProcessingPoliceDepartment().getPoliceAdmin().getUserAccount().getUsername()
                        .equals(account.getUsername())) {
                    DefaultTableModel model = (DefaultTableModel) tblCasesAssigned.getModel();
                    model.setRowCount(0);                    
                    Object[] row = new Object[7];
                        row[0] = aCase;
                        row[1] = aCase.getAccused().getName();
                        row[2] = aCase.getStartDate().toString();
                        row[3] = aCase.getYearsOfImprisonment() + "";
                        row[4] = aCase.getTransportedToPrisonBy() != null ? aCase.getTransportedToPrisonBy().getUserAccount().getUsername() : "-";
                        row[5] = aCase.isImprisoned().toString();
                        row[6] = aCase.getStatus();
                    model.addRow(row);
                }
            }
        }
    }

}
